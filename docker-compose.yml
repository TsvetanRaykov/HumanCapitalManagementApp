version: "3.9"
services:
  db:
    container_name: postgres-db
    environment:
      - POSTGRES_PASSWORD=zHBn!weo6U
    image: postgres:15
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
  identityserver:
    container_name: identityserver
    build:
        context: .
        dockerfile: ./HCM.Auth/Dockerfile
    depends_on:
      - db
    entrypoint: /bin/sh -c "update-ca-certificates && dotnet HCM.Auth.dll"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:7000
      - ASPNETCORE_Kestrel__Certificates__Default__Password=U2Jw*nMyaW
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/localhost.pfx
      - CONNECTIONSTRINGS__IDENTITY=Server=db;Port=5432;Database=identity;User Id=postgres;Password=zHBn!weo6U
      - CONNECTIONSTRINGS__IDENTITYSERVER=Server=db;Port=5432;Database=identityServer;User Id=postgres;Password=zHBn!weo6U
      - AUTHENTICATION__AUTHORITY=https://identityserver:7000
      - AUTHENTICATION__AUDIENCE=HCM.Ums
    ports:
      - "7000:7000"
    volumes:
      - ./localhost.pfx:/https/localhost.pfx:ro
      - ./localhost.crt:/usr/local/share/ca-certificates/localhost.crt:ro
  api:
    container_name: api
    build:
        context: .
        dockerfile: ./HCM.Api/Dockerfile
    depends_on:
      - identityserver
    entrypoint: /bin/sh -c "update-ca-certificates && dotnet HCM.Api.dll"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:7001
      - ASPNETCORE_Kestrel__Certificates__Default__Password=U2Jw*nMyaW
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/localhost.pfx
      - AUTHENTICATION__AUTHORITY=https://identityserver:7000
      - AUTHENTICATION__AUDIENCE=HCM.Api
      - CONNECTIONSTRINGS__HCMDB=Server=db;Port=5432;Database=hcm;User Id=postgres;Password=zHBn!weo6U
    ports:
      - "7001:7001"
    volumes:
      - ./localhost.pfx:/https/localhost.pfx:ro
      - ./localhost.crt:/usr/local/share/ca-certificates/localhost.crt:ro
  app:
    build:
      context: .
      dockerfile: ./HCM.App/Dockerfile
    depends_on:
      - api
      - identityserver
    ports:
      - "7003:7003"
    volumes:
      - ./nginx/ssl/:/etc/nginx/ssl/
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./localhost.key:/etc/nginx/ssl/localhost.key:ro
      - ./localhost.crt:/etc/nginx/ssl/localhost.crt:ro

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "104"
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./localhost.key:/etc/grafana/localhost.key:ro
      - ./localhost.crt:/etc/grafana/localhost.crt:ro

    env_file:
      - ./grafana/config.monitoring
    restart: always

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always
       

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    restart: always

volumes:
  prometheus_data: {}
  grafana_storage: {}
  db: