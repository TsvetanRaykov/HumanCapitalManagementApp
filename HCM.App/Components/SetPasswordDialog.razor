@using HCM.Shared
@using System.Net
@inject IHttpClientFactory HttpClientFactory

@if (_show)
{
    <div class="modal fade show d-block" tabindex="-1" id="changePasswordModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                @if (_loading)
                {
                    <SpinnerComponent />
                }
                else
                {
                    <EditForm Model="_passwordViewModel" OnValidSubmit="ChangePasswordAsync">
                        <DataAnnotationsValidator />
                        <div class="modal-header">
                            <h5 class="modal-title">Set Password for @_userName</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Cancel"></button>
                        </div>
                        <div class="modal-body">
                            <div>
                                <label for="changeUserPassword" class="form-label">Password</label>
                                <InputText type="password" @bind-Value="_passwordViewModel.Password" class="form-control" id="changeUserPassword"></InputText>
                            </div>
                            <div class="my-3">
                                <label for="changeUserConfirmPassword" class="form-label">Confirm Password</label>
                                <InputText type="password" @bind-Value="_passwordViewModel.ConfirmPassword" class="form-control" id="changeUserConfirmPassword"></InputText>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Cancel">Cancel</button>
                            <button type="submit" class="btn btn-primary">Set</button>
                        </div>

                        <p class="px-3">
                            <ValidationSummary />
                            @_statusMessage
                        </p>
                    </EditForm>
                }
            </div>
        </div>
    </div>
}

@code
{
    private bool _show;
    private string? _userId;
    private bool _loading;
    private string? _statusMessage;
    private string? _userName;

    private PasswordViewModel _passwordViewModel = new();

    [Parameter]
    public EventCallback<UserDto> OnPasswordChanged { get; set; }

    public void ShowSetPassword(string? userId, string? userName)
    {
        _passwordViewModel = new PasswordViewModel();
        _userId = userId;
        _userName = userName;
        _statusMessage = string.Empty;
        _show = true;
    }

    private void Cancel()
    {
        _show = false;
    }

    private async Task ChangePasswordAsync()
    {
        _loading = true;
        var passwordDto = new PasswordDto
            {
                UserId = _userId,
                Password = _passwordViewModel.ConfirmPassword
            };

        var response = await HttpClientFactory.CreateClient("Ums")
            .PutAsJsonAsync($"{HcmConstants.ApiEndpoints.Users}/password", passwordDto);
        try
        {
            response.EnsureSuccessStatusCode();
            _statusMessage = "Password updated";
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.BadRequest)
            {
                _statusMessage = await response.Content.ReadAsStringAsync();
                return;
            }
            else
            {
                Console.WriteLine(e.Message);
            }
        }
        finally
        {
            _loading = false;
        }
        _show = false;
        var userDto = await response.Content.ReadFromJsonAsync<UserDto>();
        await OnPasswordChanged.InvokeAsync(userDto);
    }
}