@page "/EditJob/{JobId:int}"
@using Microsoft.AspNetCore.Authorization
@using AutoMapper
@using HCM.Shared
@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject IMapper Mapper

<PageTitle>Edit Job</PageTitle>

<JobEdit JobViewModel="_jobViewModel" OnModelUpdated="ConfirmUpdate"></JobEdit>

<ConfirmDialog ConfirmationChanged="ConfirmationResult" @ref="_confirmationDialog"></ConfirmDialog>

<ToastComponent @ref="_toast" Delay="5000"></ToastComponent>

@code {

    [Parameter]
    public int JobId { get; set; }

    private JobViewModel? _jobViewModel;
    private ToastComponent? _toast;
    private HttpClient? _httpClient;

    private ConfirmDialog? _confirmationDialog;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("Api");
        var job = await _httpClient.GetFromJsonAsync<JobDto>($"{HcmConstants.ApiEndpoints.Jobs}/{JobId}");
        _jobViewModel = Mapper.Map<JobViewModel>(job);
    }

    private void ConfirmUpdate()
    {
        _confirmationDialog?.Show("Confirm Job Update", $"Job {_jobViewModel?.Title} will be updated");
    }

    private async void ConfirmationResult(bool confirmed)
    {
        if (!confirmed) return;
        var notify = await UpdateJobAsync();
        _toast?.ShowToast(new ToastMessage(notify));
    }

    private async Task<string?> UpdateJobAsync()
    {
        var jobDto = Mapper.Map<JobDto>(_jobViewModel);
        try
        {
            if (_httpClient != null)
            {
                var response = await _httpClient.PutAsJsonAsync(HcmConstants.ApiEndpoints.Jobs, jobDto);
                response.EnsureSuccessStatusCode();
                return $"Job {jobDto.Title} updated.";
            }
        }
        catch (HttpRequestException e)
        {
            return e.Message;
        }
        return null;
    }

}