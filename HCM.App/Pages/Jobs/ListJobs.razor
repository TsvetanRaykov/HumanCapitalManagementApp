@page "/ListJobs"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using HCM.Shared.Data.DTO
@using HCM.App.Components
@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavManager

<PageTitle>List Jobs</PageTitle>

<h3>List Jobs</h3>

@if (_jobs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <QuickGrid Items="_jobs.AsQueryable()">
        <PropertyColumn Property="j=>j.Title" Sortable="true" Title="Title"></PropertyColumn>
        <PropertyColumn Property="j=>j.Description" Sortable="true" Title="Description"></PropertyColumn>
        <PropertyColumn Property="j=>j.MinSalary" Sortable="true" Title="Minimum Salary"></PropertyColumn>
        <PropertyColumn Property="j=>j.MaxSalary" Sortable="true" Title="Maximum Salary"></PropertyColumn>
        <PropertyColumn Property="j=>j.CreatedOn.ToLocalTime()" Sortable="true" Title="When Created" Format="dd.MM.yyyy"></PropertyColumn>
        <TemplateColumn Title="When Updated">
            @{
                if (@context.ModifiedOn.HasValue)
                {
                    @context.ModifiedOn.Value.ToLocalTime().ToString("dd.MM.yyyy")
                }
            }
        </TemplateColumn>
        <TemplateColumn Title="Actions" Class="hcm-template-column">
            <Tooltip Title="Edit Job">
                <button type="button" class="btn btn-primary" @onclick="@(() => EditJobRedirect(context))"><i class="bi bi-pen-fill"></i></button>
            </Tooltip>
            <Tooltip Title="Delete Job">
                <button type="button" class="btn btn-danger" @onclick="@(() => ConfirmDelete(context))"><i class="bi bi-window-dash"></i></button>
            </Tooltip>
            <Tooltip Title="Show Employees">
                <button type="button" class="btn btn-info" @onclick="@(() => ShowEmployees(context))"><i class="bi bi-people"></i></button>
            </Tooltip>
        </TemplateColumn>
    </QuickGrid>

    if (_jobEmployees != null && _jobEmployees.Any())
    {
        <p class="p-5">
            <h5>@(_jobEmployees.First().Job?.Title) employees</h5>
            <EmployeesListComponent Employees="_jobEmployees"></EmployeesListComponent>
        </p>
    }

    <ConfirmComponent ConfirmationChanged="DeleteConfirmed" @ref="DeleteConfirmation"></ConfirmComponent>
}

@code
{
    private JobDto[]? _jobs;
    private JobDto? _jobDtoToDelete;
    private IQueryable<EmployeeDto>? _jobEmployees;


    protected override async Task OnInitializedAsync()
    {
        _jobs = await HttpClientFactory.CreateClient("Api").GetFromJsonAsync<JobDto[]>("/api/v1/Jobs");
    }

    private void DeleteConfirmed(bool confirmed)
    {
        if (confirmed)
        {
            Console.WriteLine($"ConfirmDelete {_jobDtoToDelete?.Title}");
        }
    }

    private void ConfirmDelete(JobDto job)
    {
        _jobDtoToDelete = job;
        DeleteConfirmation?.Show("Confirm Job Deletion", $"The job {_jobDtoToDelete.Title} will be deleted.");
    }

    private ConfirmComponent? DeleteConfirmation { get; set; }

    private void ShowEmployees(JobDto context)
    {
        if (context.Employees == null) return;

        foreach (var employee in context.Employees)
        {
            employee.Job = context;
        }
        _jobEmployees = context.Employees.AsQueryable();
    }

    private void EditJobRedirect(JobDto job)
    {
        NavManager.NavigateTo($"/EditJob/{job.Id}");
    }
}