@page "/EditDepartment/{DepartmentId:int}"
@using Microsoft.AspNetCore.Authorization
@using AutoMapper
@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject IMapper Mapper

<PageTitle>Edit Department</PageTitle>

<DepartmentEdit DepartmentViewModel="_departmentViewModel" OnModelUpdated="ConfirmUpdate"></DepartmentEdit>

<ConfirmDialog ConfirmationChanged="ConfirmationResult" @ref="_confirmationDialog"></ConfirmDialog>

<ToastComponent @ref="_toast" Delay="5000"></ToastComponent>

@code {

    [Parameter]
    public int DepartmentId { get; set; }

    private DepartmentViewModel? _departmentViewModel;
    private ToastComponent? _toast;
    private HttpClient? _httpClient;
    private ConfirmDialog? _confirmationDialog;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("Api");
        var department = await _httpClient.GetFromJsonAsync<DepartmentDto>($"/api/v1/Departments/{DepartmentId}");
        _departmentViewModel = Mapper.Map<DepartmentViewModel>(department);
    }

    private void ConfirmUpdate()
    {
        _confirmationDialog?.Show("Confirm Department Update", $"Department {_departmentViewModel?.Name} will be updated");
    }

    private async void ConfirmationResult(bool confirmed)
    {
        var notify = confirmed ? await UpdateDepartmentAsync() : string.Empty;
        _toast?.ShowToast(new ToastMessage(notify));
    }

    private async Task<string?> UpdateDepartmentAsync()
    {
        var departmentDto = Mapper.Map<DepartmentDto>(_departmentViewModel);
        try
        {
            if (_httpClient != null)
            {
                var response = await _httpClient.PutAsJsonAsync("/api/v1/Departments", departmentDto);
                response.EnsureSuccessStatusCode();
                return $"Department {departmentDto.Name} updated.";
            }
        }
        catch (HttpRequestException e)
        {
            return e.Message;
        }
        return null;
    }

}